# reception/models.py - VERSION CORRIG√âE POUR INT√âGRATION

from django.db import models
from django.conf import settings
from django.utils import timezone
import random
import string

class StatutReception(models.TextChoices):
    EN_ATTENTE = 'EN_ATTENTE', 'En attente'
    NOTIFIE = 'NOTIFIE', 'Notifi√©'
    CONFIRME = 'CONFIRME', 'Confirm√©'
    RETIRE = 'RETIRE', 'Retir√©'

class ModeReception(models.TextChoices):
    WAVE = 'WAVE', 'Wave'
    ORANGE_MONEY = 'ORANGE_MONEY', 'Orange Money'
    WESTERN_UNION = 'WESTERN_UNION', 'Western Union'
    AGENT_LOCAL = 'AGENT_LOCAL', 'Agent Local'

class Reception(models.Model):
    # ===== LIEN AVEC VOTRE SYST√àME TRANSACTION =====
    transaction_origine = models.OneToOneField(
        'transactions.Transaction',
        on_delete=models.CASCADE,
        related_name='reception',
        null=True,
        blank=True,
        help_text="Transaction qui g√©n√®re cette r√©ception"
    )
    
    # ===== DESTINATAIRE =====
    destinataire = models.ForeignKey(
        settings.AUTH_USER_MODEL,  # ‚úÖ Utilise authentication.User
        on_delete=models.CASCADE, 
        related_name='receptions',
        help_text="Utilisateur qui re√ßoit l'argent"
    )
    
    # ===== CODES ET MONTANTS =====
    code_reception = models.CharField(
        max_length=20, 
        unique=True,
        help_text="Code de r√©ception pour le destinataire"
    )
    montant_a_recevoir = models.DecimalField(
        max_digits=15, 
        decimal_places=2,
        help_text="Montant que le destinataire va recevoir"
    )
    devise_reception = models.CharField(
        max_length=3, 
        default='XOF',
        help_text="Devise de r√©ception"
    )
    
    # ===== MODE DE R√âCEPTION =====
    mode_reception = models.CharField(
        max_length=20,
        choices=ModeReception.choices,
        help_text="Mode choisi pour recevoir l'argent"
    )
    canal_paiement = models.ForeignKey(
        'transactions.CanalPaiement',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='receptions',
        help_text="Canal de paiement utilis√© pour la r√©ception"
    )
    
    # ===== STATUT ET DATES =====
    statut = models.CharField(
        max_length=12, 
        choices=StatutReception.choices, 
        default=StatutReception.EN_ATTENTE
    )
    date_notification = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="Date d'envoi de la notification"
    )
    date_confirmation = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="Date de confirmation par le destinataire"
    )
    date_retrait = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="Date effective du retrait"
    )
    
    # ===== NOTIFICATIONS =====
    notification_envoyee = models.BooleanField(
        default=False,
        help_text="Notification syst√®me envoy√©e"
    )
    sms_envoye = models.BooleanField(
        default=False,
        help_text="SMS de notification envoy√©"
    )
    email_envoye = models.BooleanField(
        default=False,
        help_text="Email de notification envoy√©"
    )
    
    # ===== INFORMATIONS EXP√âDITEUR =====
    expediteur_nom = models.CharField(
        max_length=200,
        blank=True,
        help_text="Nom de l'exp√©diteur pour affichage"
    )
    expediteur_telephone = models.CharField(
        max_length=20,
        blank=True,
        help_text="T√©l√©phone de l'exp√©diteur"
    )
    message_expediteur = models.TextField(
        blank=True,
        help_text="Message de l'exp√©diteur au destinataire"
    )
    
    # ===== M√âTADONN√âES =====
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        db_table = 'receptions'
        verbose_name = 'R√©ception'
        verbose_name_plural = 'R√©ceptions'
        ordering = ['-created_at']
        
        indexes = [
            models.Index(fields=['statut', 'date_notification']),
            models.Index(fields=['destinataire', 'created_at']),
            models.Index(fields=['code_reception']),
        ]
    
    def save(self, *args, **kwargs):
        """Override save pour g√©n√©rer code automatiquement"""
        if not self.code_reception:
            self.code_reception = self.generer_code_reception()
        
        # Synchroniser avec transaction d'origine si existe
        if self.transaction_origine and not self.expediteur_nom:
            self.expediteur_nom = self.transaction_origine.expediteur.get_full_name()
            self.expediteur_telephone = self.transaction_origine.expediteur.phone_number
        
        super().save(*args, **kwargs)
    
    def generer_code_reception(self):
        """G√©n√©rer un code de r√©ception unique"""
        max_attempts = 10
        for _ in range(max_attempts):
            code = f"RCP{timezone.now().year}{random.randint(100000, 999999)}"
            if not Reception.objects.filter(code_reception=code).exists():
                return code
        
        # Fallback
        timestamp = int(timezone.now().timestamp())
        return f"RCP{timestamp}"
    
    def __str__(self):
        return f"R√©ception {self.code_reception} - {self.destinataire.get_full_name()}"
    
    # ===== PROPRI√âT√âS M√âTIER =====
    
    @property
    def destinataire_nom_complet(self):
        """Nom complet du destinataire"""
        return self.destinataire.get_full_name()
    
    @property
    def destinataire_telephone(self):
        """T√©l√©phone du destinataire"""
        return self.destinataire.phone_number
    
    @property
    def est_en_attente_retrait(self):
        """V√©rifier si en attente de retrait"""
        return self.statut in [StatutReception.NOTIFIE, StatutReception.CONFIRME]
    
    @property
    def est_termine(self):
        """V√©rifier si la r√©ception est termin√©e"""
        return self.statut == StatutReception.RETIRE
    
    @property
    def duree_traitement(self):
        """Dur√©e depuis la cr√©ation"""
        if self.date_retrait:
            return self.date_retrait - self.created_at
        return timezone.now() - self.created_at
    
    # ===== M√âTHODES M√âTIER =====
    
    def envoyer_notification(self):
        """Envoyer notification de r√©ception au destinataire"""
        if self.notification_envoyee:
            return False, "Notification d√©j√† envoy√©e"
        
        try:
            # ===== INT√âGRATION AVEC SYST√àME NOTIFICATIONS (DEV 1) =====
            from notifications.views import NotificationChannelFactory
            
            notification_channel = NotificationChannelFactory.get_channel('database')
            
            # Cr√©er notification personnalis√©e
            notification_channel.send(
                user=self.destinataire,
                title="üí∞ Argent √† recevoir",
                message=f"Vous avez re√ßu {self.montant_a_recevoir:,.0f} {self.devise_reception} de {self.expediteur_nom}. Code de r√©ception: {self.code_reception}",
                notification_type='TRANSACTION'
            )
            
            # Marquer comme envoy√©e
            self.notification_envoyee = True
            self.date_notification = timezone.now()
            self.statut = StatutReception.NOTIFIE
            self.save()
            
            return True, "Notification envoy√©e avec succ√®s"
            
        except Exception as e:
            return False, f"Erreur envoi notification: {str(e)}"
    
    def confirmer_reception(self, mode_choisi=None):
        """Confirmer la r√©ception par le destinataire"""
        if self.statut not in [StatutReception.NOTIFIE]:
            return False, "R√©ception d√©j√† confirm√©e ou non notifi√©e"
        
        if mode_choisi:
            self.mode_reception = mode_choisi
        
        self.statut = StatutReception.CONFIRME
        self.date_confirmation = timezone.now()
        self.save()
        
        # Notification de confirmation
        try:
            from notifications.views import NotificationChannelFactory
            notification_channel = NotificationChannelFactory.get_channel('database')
            
            notification_channel.send(
                user=self.destinataire,
                title="‚úÖ R√©ception confirm√©e",
                message=f"Votre r√©ception de {self.montant_a_recevoir:,.0f} {self.devise_reception} est confirm√©e. Mode: {self.get_mode_reception_display()}",
                notification_type='INFO'
            )
        except:
            pass
        
        return True, "R√©ception confirm√©e"
    
    def finaliser_retrait(self, verification_data=None):
        """Finaliser le retrait effectif"""
        if self.statut != StatutReception.CONFIRME:
            return False, "R√©ception non confirm√©e"
        
        self.statut = StatutReception.RETIRE
        self.date_retrait = timezone.now()
        self.save()
        
        # ===== INT√âGRATION AVEC TRANSACTION (DEV 2) =====
        if self.transaction_origine:
            from transactions.models import StatutTransaction
            self.transaction_origine.statusTransaction = StatutTransaction.TERMINE
            self.transaction_origine.save()
            # Les signals vont automatiquement envoyer les notifications finales
        
        # Notification de finalisation
        try:
            from notifications.views import NotificationChannelFactory
            notification_channel = NotificationChannelFactory.get_channel('database')
            
            notification_channel.send(
                user=self.destinataire,
                title="üéâ Retrait effectu√©",
                message=f"Vous avez retir√© {self.montant_a_recevoir:,.0f} {self.devise_reception} avec succ√®s via {self.get_mode_reception_display()}",
                notification_type='TRANSACTION'
            )
        except:
            pass
        
        return True, "Retrait finalis√©"
    
    def annuler_reception(self, raison=""):
        """Annuler la r√©ception"""
        if self.statut == StatutReception.RETIRE:
            return False, "R√©ception d√©j√† retir√©e"
        
        # Remettre transaction en statut ENVOYE si n√©cessaire
        if self.transaction_origine:
            from transactions.models import StatutTransaction
            self.transaction_origine.statusTransaction = StatutTransaction.ENVOYE
            self.transaction_origine.save()
        
        # Supprimer ou marquer comme annul√©e selon votre logique
        # Pour l'instant on supprime
        self.delete()
        return True, "R√©ception annul√©e"
    
    @classmethod
    def creer_depuis_transaction(cls, transaction):
        """Cr√©er une r√©ception √† partir d'une transaction"""
        # V√©rifier si une r√©ception existe d√©j√†
        if hasattr(transaction, 'reception'):
            return transaction.reception, False
        
        # Cr√©er nouvelle r√©ception
        reception = cls.objects.create(
            transaction_origine=transaction,
            destinataire=transaction.destinataire if transaction.destinataire else None,
            montant_a_recevoir=transaction.montantRecu,
            devise_reception=transaction.deviseReception,
            mode_reception=cls._map_canal_to_mode(transaction.canal_paiement),
            canal_paiement=transaction.canal_paiement,
            expediteur_nom=transaction.expediteur.get_full_name(),
            expediteur_telephone=transaction.expediteur.phone_number
        )
        
        # Envoyer notification automatiquement
        reception.envoyer_notification()
        
        return reception, True
    
    @staticmethod
    def _map_canal_to_mode(canal_paiement):
        """Mapper canal de paiement vers mode de r√©ception"""
        if not canal_paiement:
            return ModeReception.AGENT_LOCAL
        
        mapping = {
            'WAVE': ModeReception.WAVE,
            'ORANGE_MONEY': ModeReception.ORANGE_MONEY,
            'WESTERN_UNION': ModeReception.WESTERN_UNION,
        }
        return mapping.get(canal_paiement.type_canal, ModeReception.AGENT_LOCAL)

# ===== SIGNAL POUR INT√âGRATION AUTOMATIQUE =====
from django.db.models.signals import post_save
from django.dispatch import receiver

@receiver(post_save, sender='transactions.Transaction')
def creer_reception_automatique(sender, instance, created, **kwargs):
    """Signal pour cr√©er automatiquement une r√©ception quand transaction = ENVOYE"""
    # Importer ici pour √©viter circular import
    from transactions.models import StatutTransaction
    
    # Cr√©er r√©ception quand transaction devient ENVOYE
    if (instance.statusTransaction == StatutTransaction.ENVOYE and 
        instance.destinataire and 
        not hasattr(instance, 'reception')):
        
        Reception.creer_depuis_transaction(instance)

# ===== INT√âGRATION PARFAITE AVEC VOTRE SYST√àME =====
"""
‚úÖ CORRECTIONS APPORT√âES :

1. üîó INT√âGRATION TRANSACTION :
   - OneToOneField vers transactions.Transaction
   - Cr√©ation automatique via signal
   - Synchronisation statuts bidirectionnelle

2. üë§ USER MODEL CORRECT :
   - settings.AUTH_USER_MODEL pour destinataire
   - Compatible avec authentication.User
   - Acc√®s phone_number et m√©thodes User

3. üîî NOTIFICATIONS INT√âGR√âES :
   - Utilise NotificationChannelFactory (Dev 1)
   - Notifications automatiques √† chaque √©tape
   - Messages personnalis√©s selon contexte

4. üì± WORKFLOW COMPLET :
   - EN_ATTENTE ‚Üí notification ‚Üí NOTIFIE
   - Confirmation ‚Üí CONFIRME
   - Retrait ‚Üí RETIRE + transaction TERMINE

5. üéØ BUSINESS LOGIC :
   - Cr√©ation automatique depuis transaction
   - Mapping canal ‚Üí mode r√©ception
   - Gestion erreurs et annulations

üîÑ WORKFLOW AUTOMATIQUE INT√âGR√â :
1. Transaction cr√©√©e (Dev 2) ‚Üí ENVOYE
2. Signal ‚Üí R√©ception automatique
3. Notification envoy√©e (Dev 1) ‚Üí NOTIFIE
4. User confirme ‚Üí CONFIRME  
5. Retrait effectu√© ‚Üí RETIRE
6. Transaction ‚Üí TERMINE + notifications finales

üéØ UTILISATION :
# Cr√©ation manuelle
reception = Reception.objects.create(
    destinataire=user,
    montant_a_recevoir=50000,
    mode_reception='WAVE'
)
reception.envoyer_notification()

# Cr√©ation automatique via transaction
transaction.statusTransaction = 'ENVOYE'
transaction.save()  # ‚Üí Signal cr√©e Reception automatiquement
"""